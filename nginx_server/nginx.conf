worker_processes 1;
events { worker_connections 1024; }

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging settings
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Upstream services
   upstream client_side {
    server client_side:3000;  # Adjust port if client_side is served on 3000
}

upstream server_side {
    server server_side:5050;  # Backend service on port 5000
}

upstream messaging_server {
    server messaging_server:5001;  # Messaging service on port 5001
}

    # Server block to handle requests
    server {
        listen 80;  # NGINX listens on port 80 (Frontend service)

        # Route for client_side (frontend)
        location / {
            proxy_pass http://client_side;  # Pass requests to client_side
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Route for server_side (backend API)
        location /api/ {
            proxy_pass http://server_side;  # Pass requests to server_side
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Route for messaging_server (for example, WebSocket or messaging API)
        location /messaging/ {
            proxy_pass http://messaging_server;  # Pass requests to messaging_server
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
